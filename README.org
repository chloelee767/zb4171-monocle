#+TITLE: Investigating the effect of changing parameters on the trajectories learnt by Monocle 3

* Requirements
- Nextflow version 20.04.1. Try other versions at your own risk.
- The Tabula Muris dataset
* Quick start
** Downloading and preprocessing the Tabula Muris dataset
** Running the pipeline
*** Running in a local Docker container
*** Running on AWSBatch
1. Set up an AWSBatch queue. Make sure the compute environments associated with the queue have the AWS command line tool installed. You may need to create a custom AMI for this.
2. Inside the ~nextflow.config~ file, update the values of ~process.queue~, ~aws.region~ and ~aws.batch.cliPath~ variables based on the setup of your queue. ~aws.batch.cliPath~ should be the full path to the AWS command line tool in the compute environment.
3. (TODO) edit the paths to the scripts and dataset
4. Run the following command in the terminal:
   #+begin_src
nextflow run run_monocle.nf -profile awsbatch -work-dir <path_to_temp_dir_in_s3_bucket>
   #+end_src
   - ~<path_to_temp_dir_in_s3_bucket>~ is the directory that will be used as Nextflow's workDir. Nextflow will create folders in this directory to store any temporary files as well as log files.
* Useful scripts
These are some of the scripts which are used in the pipeline.

** TODO Generating Monocle 3's ~cell_data_set~ from the Tabula Muris dataset
** Single command for learning a trajectory using Monocle 3
*What it does:* The script ~run_monocle.py~ is a CLI utility for running all of the Monocle 3 functions (~preprocess_cds~, ~reduce_dimension~, ~cluster_cells~, ~learn_graph, ~order_cells~) needed to learn a trajectory, and optionally save the parameters used to run each of these functions in a JSON file.

*Requirements:*

- Python 3.8.x. The script /should/ still work with Python 3.6 or later (f-strings are used), but this has not been tested.
- Patched version of [[https://github.com/chloelee767/monocle-scripts/tree/zb4171][monocle-scripts]], a command line utility which wraps the individual functions in Monocle 3. The script is calling the Monocle functions via this utility. It adds support for more parameters in ~reduce_dimension~ / ~reduceDim~ and improves the automagic pseudotime assignments for ~order_cells~ / ~orderCells~.

These requirements can also be obtained from the following docker image: https://hub.docker.com/repository/docker/lee0767/monocle3-cli.

*Usage:*

#+begin_src bash
python run_monocle.py --input <path_to_input> --output <path_to_output> \ # required
    # the rest of the arguments below are optional:
    --save-config-to <path> \
    --temp-dir <path> \
    ## monocle parameters
    --preprocess-cds.num-dim <num_dim> --reduce-dimension.umap.n-neighbors <num_neighbors>
#+end_src
- ~--save-config-to <path>~ : where should the script save the JSON file containing all the parameters used by Monocle to? If not specified, this file will not be saved.
- ~--temp-dir <path>~ : where should the script save temporary files to? if not specified, it will use the current directory.
- The flags for the parameters for the different Monocle 3 functions are named as ~--<function_name>.<parameter_name>~, based on the function and parameter names in the R package, with all underscores replaced with dashes.
- For boolean parameter values, ~true~, ~t~, ~false~, ~f~ may be given.
- Run ~python run_monocle.py --help~ to see a list of all parameters supported.

*Example:*
#+begin_src bash
python run_monocle.py --input cds_droplet_Marrow.rds --output cds_droplet_Marrow.trajectory.rds \
    --save-config-to "monocle-params.json" --temp-dir /tmp \
    --preprocess-cds.num-dim 70 --reduce-dimension.umap.n-neighbors 30
#+end_src

*Limitations:*
- Some parameters (mainly those that involve passing in a list) are not currently supported.
** TODO Extracting trajectory information from Monocle 3's cell_data_set
#+begin_src bash
Rscript extract_info.R <input_file> <output_file>
#+end_src

*Example:* ~Rscript extract_info.R results/umap-nn-10.rds results/umap-nn-10.csv~
* Known problems / limitations

* Acknowledgements
